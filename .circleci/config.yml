version: 2.1

jobs:
  build:
    parameters:
      # TODO
      build-image:
        type: string
      # TODO
      nginx-version:
        type: string
    docker:
    - image:  << parameters.build-image >>
    resource_class: xlarge
    environment:
      # The `resource_class` implies a memory limit and supposedly a CPU count
      # limit.  However, either there is no actual CPU count limit, or the
      # limit cannot be determined from within the running job.
      # Instead, the number of CPUs on the host machine is all we can see.
      # This means that a command like `make --jobs=$(nproc)` is likely to run
      # out of memory, because while the `resource_class` says it has 2 CPUs,
      # `nproc` will report something like 36.  `make` will then spawn a bunch
      # of processes, and the job will run out of memory.
      # So, here we hard-code the number of CPUs supposedly offered by the
      # `resource_class`.  For information about the `resource_class` values,
      # see:
      # https://circleci.com/docs/2.0/configuration-reference/
      MAKE_JOB_COUNT: 8
    steps:
    - checkout
    - run: printf 'NGINX_VERSION=%s\n' << parameters.nginx-version >> >>nginx-version-info
    - run: make build
    - persist_to_workspace:
        root: .
        paths:
          - .build/libngx_http_datadog_module.so
          - nginx-version-info
    - store_artifacts:
        path: .build/libngx_http_datadog_module.so
        destination: ngx_http_datadog_module.so
    - store_artifacts:
        path: nginx-version-info
        destination: nginx-version-info

  test:
    parameters:
      # TODO
      base-image:
        type: string
        default: ""
      # TODO
      nginx-modules-path:
        type: string
        default: ""
      # TODO
      nginx-conf-path:
        type: string
        default: ""
    docker:
    # "cimg" means "convenience image."  Helpful images provided by CircleCI.
    # This one contains Python, docker-compose, and a bunch of other things.
    # See https://circleci.com/docs/circleci-images
    - image: cimg/python:3.10.5
    environment:
      # See https://github.com/containers/podman/issues/13889
      DOCKER_BUILDKIT: 0
    steps:
    - checkout
    - attach_workspace:
        at: /tmp/workspace
    - run: mv /tmp/workspace/nginx-version-info .
    - run: printf 'NGINX_MODULES_PATH=%s\n' '<< parameters.nginx-modules-path >>'
    - run: printf 'NGINX_CONF_PATH=%s\n' '<< parameters.nginx-conf-path >>'
    - run: mv /tmp/workspace/.build/libngx_http_datadog_module.so test/services/nginx/ngx_http_datadog_module.so
    - setup_remote_docker:
        # Cache docker layers somewhere so that we don't have to rebuild test
        # service images every time.
        docker_layer_caching: true
    - run: |
        env | sort
    # Instead of just running the tests, we run the tests and note whether they
    # succeeded.  This way, we can save the verbose output afterward and then
    # fail if the tests didn't succeed.
    # TODO: This sucks, though.  Find a better way.  The output of a failed test
    # runner should be red in the CI interface.
    - run: |
        if test/bin/run --verbose --failfast; then
          touch .tests-succeeded
        fi
    - store_artifacts:
        path: test/logs/test.log
        destination: test.log
    - run: |
        if ! [ -f .tests-succeeded ]; then
          cat test/logs/test.log
          printf '\n\nTests failed.  See the test run step for test driver output.  Verbose output is above.\n'
          exit 1
        fi

workflows:
  build-and-test-all:
    jobs:
    # In addition to the jobs generated by `../bin/generate_jobs_yaml.sh`,
    # I hard-code the latest OpenResty equivalent, just for testing.
    # TODO: I'm commenting this out because the dependency doesn't exist yet.
    # - test:
    #     name: "test 1.21.4-alpine OpenResty"
    #     base-image: "openresty/openresty:1.21.4.1-alpine"
    #     nginx-modules-path: "/usr/local/openresty/nginx/modules"
    #     nginx-conf-path: "/usr/local/openresty/conf/nginx.conf"
    #     requires:
    #     - "build on nginx:1.21.4-alpine"
    #     filters:
    #       tags:
    #         only: /^v[0-9]+\.[0-9]+\.[0-9]+/
    # I'm commenting out the Debian-based version of OpenResty because, as of
    # this writing, their nginx is built without --with-compat, which means
    # that our module fails the module signature check.
    # - test:
    #     name: "test 1.21.4 OpenResty"
    #     base-image: "openresty/openresty:1.21.4.1-bullseye"
    #     nginx-version: "1.21.4"
    #     nginx-modules-path: "/usr/local/openresty/nginx/modules"
    #     nginx-conf-path: "/usr/local/openresty/conf/nginx.conf"
    #     requires:
    #     - "build on nginx:1.21.4"
    #     filters:
    #       tags:
    #         only: /^v[0-9]+\.[0-9]+\.[0-9]+/

    # The following are generated by `../bin/generate_jobs_yaml.sh`.
    - build:
        name: "build on amazonlinux:2.0.20230119.1"
        build-image: "datadog/docker-library:nginx-datadog-build-amazonlinux_2.0.20230119.1"
        nginx-version: "1.22.1"
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+/
    - test:
        name: "test on amazonlinux:2.0.20230119.1"
        base-image: "amazonlinux:2.0.20230119.1"
        nginx-modules-path: "/usr/lib64/nginx/modules"
        nginx-conf-path: "/etc/nginx/nginx.conf"
        requires:
        - "build on amazonlinux:2.0.20230119.1"
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+/
    - build:
        name: "build on nginx:1.23.2-alpine"
        build-image: "datadog/docker-library:nginx-datadog-build-nginx_1.23.2-alpine"
        nginx-version: "1.23.2"
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+/
    - test:
        name: "test on nginx:1.23.2-alpine"
        base-image: "nginx:1.23.2-alpine"
        nginx-modules-path: "/usr/lib/nginx/modules"
        nginx-conf-path: "/etc/nginx/nginx.conf"
        requires:
        - "build on nginx:1.23.2-alpine"
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+/
    - build:
        name: "build on nginx:1.23.2"
        build-image: "datadog/docker-library:nginx-datadog-build-nginx_1.23.2"
        nginx-version: "1.23.2"
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+/
    - test:
        name: "test on nginx:1.23.2"
        base-image: "nginx:1.23.2"
        nginx-modules-path: "/usr/lib/nginx/modules"
        nginx-conf-path: "/etc/nginx/nginx.conf"
        requires:
        - "build on nginx:1.23.2"
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+/
