jobs:
  build:
    parameters:
      nginx-version:
        type: string
      waf:
        type: enum
        enum:
        - 'ON'
        - 'OFF'
      rum:
        type: enum
        enum:
        - 'ON'
        - 'OFF'
        default: 'OFF'
      arch:
        type: enum
        enum:
        - 'amd64'
        - 'arm64'
    steps:
    - checkout
    - run: git submodule sync && git submodule update --init --recursive
    - run:
        name: Set ARCH env var
        command: |
          if [ "<< parameters.arch >>" == "amd64" ]; then
            echo 'export ARCH=x86_64' >> $BASH_ENV;
          else
            echo 'export ARCH=aarch64' >> $BASH_ENV;
          fi
    - run:
        command: 'make build-musl'
        environment:
          BUILD_TYPE: RelWithDebInfo
          NGINX_VERSION: "<< parameters.nginx-version >>"
    - persist_to_workspace:
        root: "."
        paths:
          - ".musl-build/ngx_http_datadog_module.so"
          - ".musl-build/ngx_http_datadog_module.so.debug"
    - store_artifacts:
        path: ".musl-build/ngx_http_datadog_module.so"
        destination: ngx_http_datadog_module.so
    - store_artifacts:
        path: ".musl-build/ngx_http_datadog_module.so.debug"
        destination: ngx_http_datadog_module.so.debug
    executor:
      name: ubuntu-<< parameters.arch >>
    environment:
      MAKE_JOB_COUNT: 8
      WAF: "<< parameters.waf >>"
      RUM: "<< parameters.rum >>"
      NGINX_VERSION: "<< parameters.nginx-version >>"
  build_openresty:
    parameters:
      resty-version:
        type: string
      waf:
        type: enum
        enum:
        - 'ON'
        - 'OFF'
      arch:
        type: enum
        enum:
        - 'amd64'
        - 'arm64'
    steps:
    - checkout
    - run: git submodule sync && git submodule update --init --recursive
    - run: |
        if [ "<< parameters.arch >>" == "amd64" ]; then
          echo 'export ARCH=x86_64' >> $BASH_ENV;
        else
          echo 'export ARCH=aarch64' >> $BASH_ENV;
        fi
    - run:
        command: 'make build-openresty'
        environment:
          BUILD_TYPE: RelWithDebInfo
          RESTY_VERSION: "<< parameters.resty-version >>"
    - persist_to_workspace:
        root: "."
        paths:
          - ".openresty-build/ngx_http_datadog_module.so"
          - ".openresty-build/ngx_http_datadog_module.so.debug"
    - store_artifacts:
        path: ".openresty-build/ngx_http_datadog_module.so"
        destination: ngx_http_datadog_module.so
    - store_artifacts:
        path: ".openresty-build/ngx_http_datadog_module.so.debug"
        destination: ngx_http_datadog_module.so.debug
    executor:
      name: ubuntu-<< parameters.arch >>
    environment:
      MAKE_JOB_COUNT: 8
      WAF: "<< parameters.waf >>"
      RESTY_VERSION: "<< parameters.resty-version >>"
  coverage:
    environment:
      DOCKER_BUILDKIT: 1
    steps:
    - checkout
    - run: git submodule sync && git submodule update --init --recursive
    - run:
        name: Install Python dependencies
        command: pip install -r requirements.txt
    - run:
        command: 'make coverage'
        environment:
          ARCH: x86_64
          MAKE_JOB_COUNT: 8
          BUILD_TYPE: RelWithDebInfo
          NGINX_VERSION: 1.26.0
          WAF: ON
          BASE_IMAGE: nginx:1.26.0
    - codecov/upload:
        upload_args: '--disable-search'
        file: .musl-build/coverage.lcov
        upload_name: circleci
    machine:
      image: ubuntu-2204:current
    resource_class: xlarge
  test:
    parameters:
      base-image:
        type: string
        default: ''
      nginx-version:
        type: string
      arch:
        type: string
      waf:
        type: enum
        enum:
        - 'ON'
        - 'OFF'
      rum:
        type: enum
        enum:
        - 'ON'
        - 'OFF'
        default: 'OFF'
    executor:
      name: docker-<< parameters.arch >>
      image: cimg/python:3.10.13
    environment:
      # https://github.com/containers/podman/issues/13889
      DOCKER_BUILDKIT: 1
      WAF: "<< parameters.waf >>"
      RUM: "<< parameters.rum >>"
    steps:
    - checkout
    - run:
        name: Install Python dependencies
        command: pip install -r requirements.txt
    - attach_workspace:
        at: "/tmp/workspace"
    - setup_remote_docker:
        docker_layer_caching: true
    - run: python3 test/bin/run.py --platform linux/<<parameters.arch>> --image <<parameters.base-image>> --module-path /tmp/workspace/.musl-build/ngx_http_datadog_module.so --  --verbose --failfast
    - store_artifacts:
        path: test/logs/test.log
        destination: test.log
  test-openresty:
    parameters:
      base-image:
        type: string
        default: ''
      resty-version:
        type: string
      arch:
        type: string
      waf:
        type: enum
        enum:
        - 'ON'
        - 'OFF'
    executor:
      name: docker-<< parameters.arch >>
      image: cimg/python:3.10.13
    environment:
      # https://github.com/containers/podman/issues/13889
      DOCKER_BUILDKIT: 1
      WAF: "<< parameters.waf >>"
    steps:
    - checkout
    - run:
        name: Install Python dependencies
        command: pip install -r requirements.txt
    - attach_workspace:
        at: "/tmp/workspace"
    - setup_remote_docker:
        docker_layer_caching: true
    - run: python3 test/bin/run.py --platform linux/<<parameters.arch>> --image <<parameters.base-image>> --module-path /tmp/workspace/.openresty-build/ngx_http_datadog_module.so -- --verbose --failfast
    - store_artifacts:
        path: test/logs/test.log
        destination: test.logâ€¡
  test_ingress:
    parameters:
      base-image:
        type: string
        default: ''
      nginx-version:
        type: string
      arch:
        type: string
    executor:
      name: docker-<< parameters.arch >>
      image: cimg/python:3.10.13
    environment:
      # https://github.com/containers/podman/issues/13889
      DOCKER_BUILDKIT: 1
      NGINX_FLAVOR: "ingress-nginx"
    steps:
    - checkout
    - run:
        name: Install Python dependencies
        command: pip install -r requirements.txt
    - attach_workspace:
        at: "/tmp/workspace"
    - setup_remote_docker:
        docker_layer_caching: true
    - run: python3 test/bin/run.py --platform linux/<<parameters.arch>> --image <<parameters.base-image>>:v<<parameters.nginx-version>> --module-path /tmp/workspace/.musl-build/ngx_http_datadog_module.so -- --verbose --failfast
    - store_artifacts:
        path: test/logs/test.log
        destination: test.log
  system_tests:
    machine:
      # https://support.circleci.com/hc/en-us/articles/360007324514-How-can-I-use-Docker-volume-mounting-on-CircleCI-
      image: ubuntu-2404:current
    resource_class: large
    steps:
      - attach_workspace:
          at: "/tmp/workspace"
      - run:
          name: clone system-tests repo
          command: git clone https://github.com/DataDog/system-tests.git
      - run:
          name: Install python 3.12
          command: sudo apt-get install python3.12-venv
      - run:
          name: Move the module to the system-tests directory
          working_directory: ./system-tests
          command: cp /tmp/workspace/.musl-build/ngx_http_datadog_module.so binaries/ngx_http_datadog_module-appsec-amd64-1.25.4.so
      - run:
          name: Build test targets
          working_directory: ./system-tests
          command: ./build.sh cpp_nginx
      - run:
          name: Run DEFAULT scenarios
          working_directory: ./system-tests
          command: ./run.sh
          environment:
            DD_API_KEY: fakekey
  format:
    docker:
    - image: datadog/docker-library:dd-trace-cpp-ci
    resource_class: small
    steps:
    - checkout
    - run:
        name: Verify versions (release tag only)
        command: |
          if [[ $CIRCLE_TAG =~ ^v ]]; then
            bin/verify_version.sh "$(echo "$CIRCLE_TAG" | tr -d v)"
          else
            echo "Not a release"
          fi
    - run:
        name: Install Python dependencies
        command: |
          pip install -r requirements.txt
          update-alternatives --install /usr/local/bin/yapf3 yapf3 /usr/local/bin/yapf 100
    - run: make lint
  shellcheck:
    docker:
    - image: koalaman/shellcheck-alpine:v0.9.0
      entrypoint: "/bin/sh"
    steps:
    - checkout
    - run: find bin/ test/ example/ installer/ -type f -executable | xargs shellcheck --exclude
        SC1071,SC1091,SC2317
  check-ci-definition:
    docker:
      - image: circleci/circleci-cli:latest
    steps:
    - checkout
    - run:
        name: Verify 
        command: |
          CIRCLE_CFG=generated-config.yml make circleci-config 
          diff .circleci/continue_config.yml generated-config.yml
  build_installer_arm64:
    steps:
    - checkout
    - run: go test -C ./installer/configurator -v
    - run: CGO_ENABLED=0 go -C ./installer/configurator build -o nginx-configurator
    - store_artifacts:
        path: "./installer/configurator/nginx-configurator"
        destination: nginx-configurator
    machine:
      image: ubuntu-2204:current
    resource_class: arm.medium
  build_installer_amd64:
    steps:
    - checkout
    - run: CGO_ENABLED=0 go -C ./installer/configurator build -o nginx-configurator
    - persist_to_workspace:
        root: "./installer/configurator"
        paths:
          - "nginx-configurator"
    - store_artifacts:
        path: "./installer/configurator/nginx-configurator"
        destination: nginx-configurator
    machine:
      image: ubuntu-2204:current
    resource_class: medium
  installer_test:
    parameters:
      base-dockerfile:
        type: string
    machine:
      image: ubuntu-2204:current
    steps:
    - checkout
    - attach_workspace:
        at: "/tmp/workspace"
    - run:
          name: Move the configurator go binary to the installer directory
          working_directory: ./installer
          command: cp /tmp/workspace/nginx-configurator .
    - run:
        name: Run installer tests
        command: docker compose -f installer/test/docker-compose.yml up --build --exit-code-from nginx
        environment:
          DD_API_KEY: fakekey
          NGINX_DOCKERFILE: << parameters.base-dockerfile >>
  installer_download_test:
    machine:
      image: ubuntu-2204:current
    steps:
    - checkout
    - run:
        name: Run installer download tests
        command: docker compose -f installer/test/docker-compose-download.yml up --build --exit-code-from nginx
        environment:
          DD_API_KEY: fakekey
          NGINX_DOCKERFILE: bookworm.Dockerfile
  build_ingress_nginx_module:
    executor:
      name: ubuntu-<< parameters.arch >>
    environment:
      MAKE_JOB_COUNT: 8
    parameters:
      version:
        type: string
      arch:
        type: enum
        enum:
        - 'amd64'
        - 'arm64'
    steps:
    - checkout
    - run: git submodule sync && git submodule update --init --recursive
    - run: |
        if [ "<< parameters.arch >>" == "amd64" ]; then
          echo 'export ARCH=x86_64' >> $BASH_ENV;
        else
          echo 'export ARCH=aarch64' >> $BASH_ENV;
        fi
    - run:
        command: make build-ingress-nginx
        environment:
          WAF: ON
          BUILD_TYPE: RelWithDebInfo
          INGRESS_NGINX_VERSION: "<< parameters.version >>"
    - persist_to_workspace:
        root: "."
        paths:
          - ".musl-build/ngx_http_datadog_module.so"
          - ".musl-build/ngx_http_datadog_module.so.debug"
    - store_artifacts:
        path: ".musl-build/ngx_http_datadog_module.so"
        destination: ngx_http_datadog_module.so
    - store_artifacts:
        path: ".musl-build/ngx_http_datadog_module.so.debug"
        destination: ngx_http_datadog_module.so.debug

