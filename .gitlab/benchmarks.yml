stages:
  - run-benchmarks
  - gate
  - notify

variables:
  MACROBENCHMARKS_CI_IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/benchmarking-platform:cpp-nginx

.benchmarks:
  stage: run-benchmarks
  tags: ["runner:apm-k8s-same-cpu"]
  timeout: 1h
  image: $MACROBENCHMARKS_CI_IMAGE
  script:
    - git clone --branch cpp/nginx https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/benchmarking-platform platform && cd platform
    - bp-runner bp-runner.yml --debug
  artifacts:
    name: "artifacts"
    when: always
    paths:
      - platform/artifacts/
    expire_in: 3 months
  variables:
    # Benchmark's env variables. Modify to tweak benchmark parameters.
    DD_TRACE_DEBUG: "false"
    DD_RUNTIME_METRICS_ENABLED: "true"

    DD_BENCHMARKS_NGINX_IMAGE_TAG: amd64-1.26.0

    K6_OPTIONS_NORMAL_OPERATION_RATE: 1000
    K6_OPTIONS_NORMAL_OPERATION_DURATION: 5m
    K6_OPTIONS_NORMAL_OPERATION_GRACEFUL_STOP: 10s
    K6_OPTIONS_NORMAL_OPERATION_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_NORMAL_OPERATION_MAX_VUS: 4

    K6_OPTIONS_HIGH_LOAD_RATE: 5000
    K6_OPTIONS_HIGH_LOAD_DURATION: 2m
    K6_OPTIONS_HIGH_LOAD_GRACEFUL_STOP: 10s
    K6_OPTIONS_HIGH_LOAD_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_HIGH_LOAD_MAX_VUS: 4

    # Gitlab and BP specific env vars. Do not modify.
    KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: nginx-datadog
    FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY: "true"

  # Workaround: Currently we're not running the benchmarks on every PR, but GitHub still shows them as pending.
  # By marking the benchmarks as allow_failure, the Github checks are not displayed.
  allow_failure: true

baseline:
  extends: .benchmarks
  variables:
    DD_BENCHMARKS_CONFIGURATION: baseline

only-tracing:
  extends: .benchmarks
  variables:
    DD_BENCHMARKS_CONFIGURATION: only-tracing

check-slo-breaches:
  stage: gate
  when: always
  tags: ["arch:amd64"]
  image: $MACROBENCHMARKS_CI_IMAGE
  script:
    - git clone --branch cpp/nginx https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/benchmarking-platform platform && cd platform
    - bp-runner bp-runner.fail-on-breach.yml

notify-slo-breaches:
  stage: notify
  needs: ["check-slo-breaches"]
  tags: [ "arch:amd64" ]
  when: always
  image: registry.ddbuild.io/slack-notifier:v27936653-9a2a7db-sdm-gbi-jammy@sha256:c9d1145319d1904fa72ea97904a15200d3cb684324723f9e1700bc02cc85065c
  variables:
    CHANNEL: "guild-dd-trace-py"
  script:
    - |
      BRANCH_URL="https://github.com/DataDog/$CI_PROJECT_NAME/tree/$CI_COMMIT_REF_NAME"
      COMMIT_URL="https://github.com/DataDog/$CI_PROJECT_NAME/commit/$CI_COMMIT_SHA"
      BUILD_URL="$CI_PROJECT_URL/pipelines/$CI_PIPELINE_ID"
    - |
      if [ -f platform/artifacts/threshold_breach_detected ]; then
        MESSAGE_TEXT=":x: <$BRANCH_URL|$CI_COMMIT_REF_NAME> <$COMMIT_URL|$CI_COMMIT_SHORT_SHA> - Performance SLOs in $CI_PROJECT_NAME were breached in <$BUILD_URL|$CI_PIPELINE_ID>! Please look into it."
      elif [ -f platform/artifacts/warning_breach_detected ]; then
        MESSAGE_TEXT=":warning: <$BRANCH_URL|$CI_COMMIT_REF_NAME> <$COMMIT_URL|$CI_COMMIT_SHORT_SHA> - Performance SLOs in $CI_PROJECT_NAME are about to be breached! A warning threshold in <$BUILD_URL|$CI_PIPELINE_ID> was triggered. Please look into it."
      fi
    - if [ -n "${MESSAGE_TEXT:-}" ]; then postmessage "$CHANNEL" "$MESSAGE_TEXT"; fi

