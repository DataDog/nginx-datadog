services:

  # `nginx` is the service that loads the Datadog module and is sent requests
  # to probe the module's behavior.
  nginx:
    image: nginx-datadog-test-services-nginx
    build:
      context: ./services/nginx
      dockerfile: ./Dockerfile
      args:
        BASE_IMAGE: ${BASE_IMAGE}
    environment:
      DD_REMOTE_CONFIG_POLL_INTERVAL_SECONDS: 1
    cap_add:
      - SYS_PTRACE
    volumes:
      - ../:/mnt/repo/
    depends_on:
      - http
      - fastcgi
      - grpc
      - agent
      - uwsgi

  # `agent` is a mock trace agent.  It listens on port 8126, accepts msgpack,
  # decodes the resulting traces, and prints them to standard output as JSON.
  # The tests can inspect traces sent to the agent (e.g. from the nginx module)
  # by looking at `agent` log lines in the output of `docker compose up`.
  agent:
    image: nginx-datadog-test-services-agent
    build:
      context: ./services/agent
      dockerfile: ./Dockerfile

  # `http` is an HTTP server that is reverse proxied by `nginx`.  It listens
  # on port 8080 and responds with a JSON object containing the name of
  # the service ("http") and the request's HTTP headers.  This way, tests can
  # see which trace context, if any, was propagated to the reverse proxied
  # server.
  http:
    image: nginx-datadog-test-services-http
    build:
      context: ./services/http
      dockerfile: ./Dockerfile
    environment:
      - DD_ENV=prod
      - DD_AGENT_HOST=agent
      - DD_SERVICE=http
    depends_on:
      - agent

  # `fastcgi` is a FastCGI server that is reverse proxied by `nginx`.  It
  # listens on port 8080 and responds with a JSON object containing the name of
  # the service ("fastcgi") and the request's headers.  This way, tests can see
  # which trace context, if any, was propagated to the reverse proxied server.
  fastcgi:
    image: nginx-datadog-test-services-fastcgi
    build:
      context: ./services/fastcgi
      dockerfile: ./Dockerfile
    environment:
      - DD_ENV=prod
      - DD_AGENT_HOST=agent
      - DD_SERVICE=fastcgi
    depends_on:
      - agent

  # `uwsgi` is a uWSGI server that is reverse proxied by `nginx`.  It
  # listens on port 8080 and responds with a JSON object containing the name of
  # the service ("uwsgi") and the request's headers.  This way, tests can see
  # which trace context, if any, was propagated to the reverse proxied server.
  uwsgi:
    image: nginx-datadog-test-services-uwsgi
    build:
      context: ./services/uwsgi
      dockerfile: ./Dockerfile
    stop_signal: SIGQUIT
    environment:
      - DD_ENV=prod
      - DD_AGENT_HOST=agent
      - DD_SERVICE=uwsgi
    depends_on:
      - agent

  # `grpc` is a gRPC server that is reverse proxied by `nginx`.  It
  # listens on port 1337 and responds with a message containing the metadata
  # sent with the request.  This way, tests can see
  # which trace context, if any, was propagated to the reverse proxied server.
  # gRPC requests are made to nginx using `grpcurl`, which is included in the
  # `nginx` container image.
  grpc:
    image: nginx-datadog-test-services-grpc
    build:
      context: ./services/grpc
      dockerfile: ./Dockerfile
    environment:
      - DD_ENV=prod
      - DD_AGENT_HOST=agent
      - DD_SERVICE=grpc
    depends_on:
      - agent

  # `client` is a container that exists solely so that the test runner can
  # `docker compose exec` into it to run command line tools such as `curl` and
  # `grpcurl`.  This way, the test runner's network doesn't need access to the
  # network created by docker compose.  The test runner interacts with the
  # docker compose services via `docker compose` and `docker` commands only.
  # This became necessary when these tests were integrated into CircleCI --
  # CircleCI's container-based remote-docker docker compose setup does not
  # allow a host port binding.
  client:
    image: nginx-datadog-test-services-client
    build:
      context: ./services/client
      dockerfile: ./Dockerfile
