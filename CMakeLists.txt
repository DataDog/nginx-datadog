cmake_minimum_required(VERSION 3.7)
# The C code doesn't care about the C++ version.
# dd-trace-cpp works with C++17 or newer.
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
cmake_policy(SET CMP0068 NEW)
cmake_policy(SET CMP0135 NEW)

# This build configuration combines the following other build configurations:
# - `nginx-datadog.cmake`, the actual nginx module source in `src/`,
# - `nginx-module.cmake`, the nginx-specific boilerplate code generated by
#   nginx's `configure` script,
# - `dd-trace-cpp/CMakeLists.txt`, the Datadog tracing library.

project(ngx_http_datadog_module)

option(NGINX_DATADOG_ASM_ENABLED "Build with libddwaf" ON)
set(NGINX_SRC_DIR "" CACHE PATH "The path to a directory with nginx sources")
set(NGINX_VERSION "" CACHE STRING "The nginx version")
if (NGINX_SRC_DIR STREQUAL "" AND NGINX_VERSION STREQUAL "")
  message(FATAL_ERROR "Set NGINX_SRC_DIR or, alternatively NGINX_VERSION")
endif()

# Prefer the build mode "release with debug info" if another mode wasn't
# specified.
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "RelWithDebInfo")
endif()

# Global compiler options
if(CMAKE_COMPILER_IS_GNUCXX)
  # This warning has a false positive. See
  # <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108088>.
  add_compile_options(-Wno-error=free-nonheap-object)
endif()

# Nginx module boilerplate (code within the nginx repository)
include(./nginx-module.cmake)

add_subdirectory(./dd-trace-cpp EXCLUDE_FROM_ALL)

if(NGINX_DATADOG_ASM_ENABLED)
  include(./libddwaf.cmake)
  find_package(libddwaf REQUIRED)
  include_directories(rapidjson/include)
endif()

# The shared library (nginx module) that we are building.
add_library(ngx_http_datadog_module SHARED)

target_sources(ngx_http_datadog_module
  PRIVATE
    src/array_util.cpp
    src/datadog_conf.cpp
    src/datadog_conf_handler.cpp
    src/datadog_context.cpp
    src/datadog_directive.cpp
    src/datadog_handler.cpp
    src/datadog_variable.cpp
    src/dd.cpp
    src/defer.cpp
    src/global_tracer.cpp
    src/log_conf.cpp
    src/ngx_event_scheduler.cpp
    src/ngx_header_reader.cpp
    src/ngx_http_datadog_module.cpp
    src/ngx_logger.cpp
    src/ngx_script.cpp
    src/propagation_header_querier.cpp
    src/request_tracing.cpp
    src/string_util.cpp
    src/tracing_library.cpp
)
if(NGINX_DATADOG_ASM_ENABLED)
  target_sources(ngx_http_datadog_module
    PRIVATE
    src/security/blocking.cpp
    src/security/client_ip.cpp
    src/security/collection.cpp
    src/security/context.cpp
    src/security/ddwaf_obj.cpp
    src/security/library.cpp
    src/security/waf_remote_cfg.cpp)
  target_compile_definitions(ngx_http_datadog_module PRIVATE WITH_WAF)
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
  target_compile_options(ngx_http_datadog_module PRIVATE -Wall -pedantic -Werror
    -Wno-c++20-extensions)
endif()


target_include_directories(ngx_http_datadog_module
  PRIVATE
    src/
)

target_link_libraries(ngx_http_datadog_module dd_trace_cpp-objects nginx_module)
if(NGINX_DATADOG_ASM_ENABLED)
  target_link_libraries(ngx_http_datadog_module libddwaf_shared)
endif()

# Remove the "lib" prefix to match NGINX convention
set_property(TARGET ngx_http_datadog_module PROPERTY PREFIX "")

if(CMAKE_COMPILER_IS_GNUCXX OR (CMAKE_CXX_COMPILER_ID MATCHES "Clang"))
  if(APPLE)
    set_property(TARGET ngx_http_datadog_module PROPERTY SUFFIX ".so")
    target_link_options(ngx_http_datadog_module PRIVATE -undefined dynamic_lookup)
  else()
    target_link_libraries(ngx_http_datadog_module -static-libstdc++ -static-libgcc)
  endif()
endif()

if(NGINX_DATADOG_ASM_ENABLED)
  get_target_property(libddwaf_target_path libddwaf_shared LOCATION)
  get_filename_component(libddwaf_target_dir ${libddwaf_target_path}  DIRECTORY)
  if(APPLE)
    set(RPATH_VAL "@loader_path" "${libddwaf_target_dir}")
  else()
    set(RPATH_VAL "$ORIGIN" "${libddwaf_target_dir}")
  endif()
  set_target_properties(ngx_http_datadog_module PROPERTIES
    INSTALL_RPATH_USE_LINK_PATH false
    BUILD_WITH_INSTALL_RPATH true
    INSTALL_RPATH "${RPATH_VAL}")
endif()

# vim: et ts=2 sw=2:
